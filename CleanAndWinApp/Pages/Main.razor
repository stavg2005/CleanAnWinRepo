@page "/main"
@inject UserService Userservice
@inject AuthService AuthService
@inject NavigationManager nav;
@inject IJSRuntime JSRuntime
@inject Data.BrowserService Service
@inject Data.BrowserDimension d;
@* <p>@AuthService.GetAuthToken()</p> *@
<link rel="stylesheet" href="css/Proggress.css">
<link rel="stylesheet" href="css/Store.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons CSS (if you're using Bootstrap Icons) -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
@using Microsoft.JSInterop

 <div  style="filter: blur(@(blur)px);height:@(d.Height)px;overflow-y:scroll">

@if(AuthService.IsUserAuthenticated)
{
   
    if (Userservice.CurrentUser != null)
    {

            <div>
                <div class="centered-div">Hello  @Userservice.CurrentUser.UserName!</div>

                 


                <img @onclick="ToggleSidebar" class="profile-pic" src="@path"  />
                <img style="left:0;width:50px;height:50px;position:absolute;top:5px" src="css/imags/shopping-cart.png" @onclick="GoCart"/>

                <input style="opacity:0;" @bind-value="progressValue" />
                <button style="opacity:0">Update Progress</button>
                <div class="nav-bar" style="width:300px;height:50px;margin-top:615px;height:80px">
                </div>
                <h1 style="margin-top:175px;position:fixed;margin-left:120px"> Level:@level</h1>
                <button @onclick="Report" class="button-9" style="margin-top:430px;height:100px" role="button">Report Clean</button>

                </div>


      }



        <div class="navbar" style="bottom:-100px">
            <img @onclick="Gomap" src="css/imags/bin.png" style="width:50px;height:50px" />
            <img @onclick="GoStroe" src="css/imags/bag.png" style="width:50px;height:50px" />
            <img @onclick="GoLeader" src="css/imags/leader.png" style="width:50px;height:50px" />
        </div>


    }
else
{
    <p>User not logged in.</p>

    nav.NavigateTo("/");
}

</div>


@if (_sidebarVisible)
{
    <div class="sidebar " style="top:0px;position:fixed;right:-20px;height:@(d.Height)px">
        <ul>


            <li class="nav-item" style="font-size:50px;list-style-type:none"  @onclick="ToggleSidebar">
          <a class="nav-link">
           <i class="bi bi-justify" > </i>
             </a>
             </li>


         <li class="nav-item" style="font-size:20px"  @onclick="GoSettings">
          <a class="nav-link">
           <i class="bi bi-person-circle" ></i> User Settings
             </a>
             </li>
            <li class="nav-item" style="font-size:20px" @onclick="GoOrders">
                <a class="nav-link">
                    <i class="bi bi-cart"></i> orders
                </a>
            </li>
            <li class="nav-item" style="font-size:20px" @onclick="GoReports">
                <a class="nav-link">
                    <i class="bi bi-pass"></i> Reports
                </a>
            </li>

            <li class="nav-item" style="font-size:20px;" @onclick="Logout" >
                <a class="nav-link" style="margin-top:550px">
                    <i class="bi bi-box-arrow-right"></i> Logout
                </a>
            </li>
 
        </ul>
    </div>
}


<!-- HTML !-->




  

@code {
    string path = "data:image/png;base64,";


    private int progressValue  { get; set; }
    int level { get; set; }
    Services.ApiServices a = new Services.ApiServices();
    static int count =0;

    private int blur = 0;
    // JavaScript Interop to call the JavaScript function
    private async Task UpdateProgressBar(int value)
    {
        // Call the JavaScript function passing the current progress value
        await JSRuntime.InvokeVoidAsync("updateProgressExternally", value);
    }

    private void GoStroe()
    {
        nav.NavigateTo("/store");
    }
    private void Report()
    {
        nav.NavigateTo("/report");
    }
    private void GoMain()
    {
        nav.NavigateTo("/reg");
    }
    private void Gomap(){

        nav.NavigateTo($"maps/{Userservice.CurrentUser.location.lat}/{Userservice.CurrentUser.location.lng}");
    }

    private void GoLeader()
    {
        nav.NavigateTo("/leaders");
    }
    private void GoSettings()
    {
        nav.NavigateTo("/setting");
    }

    private void GoOrders()
    {
        nav.NavigateTo("/testing");
    }
    private void GoReports()
    {
        nav.NavigateTo("reports");
    }


    private void GoCart()
    {
        nav.NavigateTo("/cart");
    }
    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsUserAuthenticated)
        {
            await InsertValuesToUserService();
            progressValue = GetLastDigit(Userservice.CurrentUser.xp) * 10;
            level = Userservice.CurrentUser.xp / 10;
            await GetDimensions();
            // var Orders = await a.GetAllOrders(Userservice.CurrentUser.UserID);
            // if (Orders.Count != 0)
            // {
            //     Userservice.CurrentUser.orders = Orders;
            // }
        }
        if (!AuthService.IsUserAuthenticated)
        {
            nav.NavigateTo("/login");
        }

    }



    private async Task InsertValuesToUserService()
    {
        if (AuthService.IsUserAuthenticated)
        {
            Userservice.CurrentUser = await AuthService.GetUserInfo();
            Userservice.CurrentUser = Userservice.CurrentUser;
            path = path + Convert.ToBase64String(Userservice.CurrentUser.profile);
        }

    }
    private void Logout()
    {
        // Perform logout logic
        // Clear authentication token
        AuthService.ClearAuthToken();
    }

    private  int GetLastDigit(int number)
    {
        // Ensure the input is a non-negative integer
        if (number < 0)
        {
            throw new ArgumentException("Input must be a non-negative integer", nameof(number));
        }

        // Extract the last digit
        int lastDigit = number % 10;

        return lastDigit;
    }


    private bool _sidebarVisible = false;

    private void ToggleSidebar()
    {
         count++;
        _sidebarVisible = !_sidebarVisible;
        if(count %2==0 || count ==0){
            blur =-1;
        }
        else{
            blur = 5;
        }
       
    }

    async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        d.Height = dimension.Height;
        d.Width = dimension.Width;
    }

}