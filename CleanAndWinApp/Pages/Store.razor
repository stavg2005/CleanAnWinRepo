@inject NavigationManager nav;
@inject UserService Userservice
@inject AuthService AuthService
@inject Services.ProductService Products
@inject Data.BrowserService Service
@inject Data.BrowserDimension d;
@page "/store"
@using Model;
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/shop.css">
    <link rel="stylesheet" href="css/settings.css">
    <title>Your Web Page</title>
</head>
<body style="overflow-y:scroll">

    <header class="fixed-header">
        <h1>You have @Userservice.CurrentUser.coins coins <img src="css/imags/coin.png" class="coin" /> </h1>
    </header>

    <section class="content">
        <div class="box">
            <img src="css/imags/coin.png" class="coin" />
            <h2 class="coins">@Userservice.CurrentUser.coins</h2>
        </div>

        <div class="profile">
            <img src="images/profile-pic.png" class="profile-pic" />
        </div>

        <div class="store-container">
            @{
                if(b)
                    {
                    if (InsertProduct)
                    {
                        <div style="z-index:1;position:fixed">
                            <link rel="stylesheet" href="css/settings.css">
                            <div class="wrapper bg-white mt-sm-5" style="position:fixed;width:(@d.Width+200)px;height:(@d.Height)px">
                                <h4 class="pb-4 border-bottom">Account settings</h4>
                                <div class="d-flex align-items-start py-3 border-bottom">
                                    @{

                                        <img src="@(Productpath)"
                                             class="img" alt="">
                                        <div class="pl-sm-4 pl-2" id="img-section">
                                            <b>Profile Photo</b>
                                            <b>error: @error</b>
                                            <p>Accepted file type .png. Less than 1MB</p>
                                            <InputFile OnChange="HandleFileChange" />Upload
                                        </div>

                                    }


                                </div>
                                <div class="py-2">
                                    <div class="row py-2">
                                        <div class="col-md-6">
                                            <label for="firstname">Product Name</label>
                                            <input @bind-value="ProductName" type="text" class="bg-light form-control" placeholder="ProductName">
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-md-6">
                                            <label for="email">Product description</label>
                                            <input @bind-value="ProductDescription" type="text" class="bg-light form-control" placeholder="ProductDescription">
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-md-6">
                                            <label for="email">Price</label>
                                            <input @bind-value="ProductPrice" type="text" class="bg-light form-control" placeholder="ProductPrice">
                                        </div>
                                    </div>
                                    <div class="py-3 pb-4 border-bottom">
                                        <button @onclick="AddProduct" class="btn btn-primary mr-3">add new product</button>
                                        <button class="btn border button">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    }
                    foreach (Product i in Products.ProductList)
                    {
                        <div class="product">


                            <span @onclick="() =>GoToProuctPage(i.ProductID)"> <img src="@(path+Convert.ToBase64String(i.ProductPicture))" class="product-picture" alt="Product 1 "></span>
                            <div class="product-name" @onclick="() =>GoToProuctPage(i.ProductID)">
                                <h2>@i.ProductName <br /><p> <img class="coin" src="css/imags/coin.png"   style="top:80%;right:80%"/>@i.ProductPrice</p></h2>
                            </div>
                        </div>
                    }
                    if (Userservice.CurrentUser.IsAdmin)
                    {
                        <button class="button-3" role="button" @onclick="AddP" style="width"> add new product</button>
                    }
                    
                    
                }
            }
            
          <div style="position:relative;height:100px"></div>

            <!-- Add more product entries as needed -->

@*             <div class="navbar">
                <img src="css/imags/bin.png" />
                <img src="css/imags/bag.png" />
                <img src="css/imags/user.png" />
            </div> *@
        </div>
    </section>

    <footer style="background-color:white">

        <div class="navbar">
            <img @onclick="Gomap" src="css/imags/bin.png" style="width:50px;height:50px" />
            <img @onclick="GoStroe" src="css/imags/bag.png" style="width:50px;height:50px" />
            <img @onclick="GoSettings" src="css/imags/user.png" style="width:50px;height:50px" />
        </div>
    </footer>

</body>
<style>
    <!-- HTML ! -->
    
    /* CSS */
    .button-3 {
        appearance: none;
        background-color: #2ea44f;
        border: 1px solid rgba(27, 31, 35, .15);
        border-radius: 6px;
        box-shadow: rgba(27, 31, 35, .1) 0 1px 0;
        box-sizing: border-box;
        color: #fff;
        cursor: pointer;
        display: inline-block;
        font-family: -apple-system,system-ui,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
        font-size: 14px;
        font-weight: 600;
        line-height: 20px;
        padding: 6px 16px;
        position: relative;
        text-align: center;
        text-decoration: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
        white-space: nowrap;
    }

    .button-3:focus:not(:focus-visible):not(.focus-visible) {
        box-shadow: none;
        outline: none;
    }

    .button-3:hover {
        background-color: #2c974b;
    }

    .button-3:focus {
        box-shadow: rgba(46, 164, 79, .4) 0 0 0 3px;
        outline: none;
    }

    .button-3:disabled {
        background-color: #94d3a2;
        border-color: rgba(27, 31, 35, .1);
        color: rgba(255, 255, 255, .8);
        cursor: default;
    }

    .button-3:active {
        background-color: #298e46;
        box-shadow: rgba(20, 70, 32, .2) 0 1px 0 inset;
    }
</style>
@code {
    List<Product> l { get; set; }
    string error { get; set; }
    ApiServices es = new ApiServices();
    bool b = false;
    bool InsertProduct  { get; set; }
    string path = "data:image/png;base64,";
    string Productpath = "data:image/png;base64,";
    private string modalDisplay = "none";
    string ProductName { get; set; }
    string ProductDescription { get; set; }
    string ProductPrice { get; set; }
    byte[] ProductPicture { get; set; }
    protected override async Task OnInitializedAsync()
    {

        await GetDimensions();
        await GetC(Userservice.CurrentUser.UserID, true);
        InsertProduct = false;
    }

    private void GoStroe()
    {
        nav.NavigateTo("/store");
    }
    private void GoMain()
    {
        nav.NavigateTo("/reg");
    }
    private void Gomap()
    {

        nav.NavigateTo($"maps/{Userservice.CurrentUser.location.lat}/{Userservice.CurrentUser.location.lng}");
    }

    private void GoSettings()
    {
        nav.NavigateTo("/setting");
    }
    private void GoToProuctPage(int id)
    {
        nav.NavigateTo($"/item/{id.ToString()}");
    }

    public void OpenModal()
    {
        modalDisplay = "block";
        Console.WriteLine("Modal opened");
    }

    private async Task AddProduct()
    {
        Product p = new Product(-1, ProductName, ProductDescription, int.Parse(ProductPrice), ProductPicture);
        error = await es.InsertNewProduct(p);
        StateHasChanged();
    }
    private void CloseModal()
    {
        modalDisplay = "none";
    }
    public async Task GetC(int id, bool isphone)
    {

        b = true;
    }

    public void AddP()
    {
        InsertProduct = true;
    }

    async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        d.Height = dimension.Height;
        d.Width = dimension.Width;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        // Ensure the selected file is not null
        if (e.File != null)
        {
            // Read the file content into a byte array
            using (var memoryStream = new MemoryStream())
            {
                await e.File.OpenReadStream().CopyToAsync(memoryStream);
                var imageData = memoryStream.ToArray();

                // Create an ImageModel instance and upload the image
                var imaget = new ImageModel
                    {
                        FileName = e.File.Name,
                        ImageData = imageData
                    };
                Productpath = Productpath + Convert.ToBase64String(imageData);

                ProductPicture = imaget.ImageData;
            }
        }
    }
}
