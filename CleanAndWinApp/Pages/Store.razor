@inject NavigationManager nav;
@inject UserService Userservice
@inject AuthService AuthService
@inject Services.ProductService Products
@inject Data.BrowserService Service
@inject Data.BrowserDimension d;
@page "/store"
@using Model;
@using Services
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/shop.css">
    <link rel="stylesheet" href="css/settings.css">
</head>
<body style="overflow-y:scroll">

    <header class="fixed-header">
        <h1>You have @Userservice.CurrentUser.coins coins <img src="css/imags/coin.png" class="coin" /> </h1>
    </header>
    <div  style="height:200px;position:absolute"></div>
    <section class="content">


        <div class="store-container" style="z-index:11">
            @{
                @if (Products.ProductList != null)
                {
                    foreach (Product i in Products.ProductList)
                    {
                        
                            <div class="product">


                                <span @onclick="() =>GoToProuctPage(i.ProductID)"> <img src="@(path+Convert.ToBase64String(i.ProductPicture))" class="product-picture" alt="Product 1 "></span>
                                <div class="product-name" @onclick="() =>GoToProuctPage(i.ProductID)">
                                    <h2>@i.ProductName <br /><p> <img class="coin" src="css/imags/coin.png" style="top:80%;right:80%" />@i.ProductPrice</p></h2>
                                </div>
                            </div>
                        
                        
                    }
   
                }
                    
                    
                    
                    
                }
            

        </div>
    </section>

    <footer style="background-color:white">

        <div class="navbar">
            <img @onclick="Gomap" src="css/imags/bin.png" style="width:50px;height:50px" />
            <img @onclick="GoMain" src="css/imags/home.png" style="width:50px;height:50px" />
            <img @onclick="GoSettings" src="css/imags/user.png" style="width:50px;height:50px" />
        </div>
    </footer>

</body>
<style>
    <!-- HTML ! -->
    
    /* CSS */
    .button-3 {
        appearance: none;
        background-color: #2ea44f;
        border: 1px solid rgba(27, 31, 35, .15);
        border-radius: 6px;
        box-shadow: rgba(27, 31, 35, .1) 0 1px 0;
        box-sizing: border-box;
        color: #fff;
        cursor: pointer;
        display: inline-block;
        font-family: -apple-system,system-ui,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";
        font-size: 14px;
        font-weight: 600;
        line-height: 20px;
        padding: 6px 16px;
        position: relative;
        text-align: center;
        text-decoration: none;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        vertical-align: middle;
        white-space: nowrap;
    }

    .button-3:focus:not(:focus-visible):not(.focus-visible) {
        box-shadow: none;
        outline: none;
    }

    .button-3:hover {
        background-color: #2c974b;
    }

    .button-3:focus {
        box-shadow: rgba(46, 164, 79, .4) 0 0 0 3px;
        outline: none;
    }

    .button-3:disabled {
        background-color: #94d3a2;
        border-color: rgba(27, 31, 35, .1);
        color: rgba(255, 255, 255, .8);
        cursor: default;
    }

    .button-3:active {
        background-color: #298e46;
        box-shadow: rgba(20, 70, 32, .2) 0 1px 0 inset;
    }

    body {
        margin: 0;
        padding-top: 50px; /* Adjust this value to match the height of your header */
        overflow-y: scroll;
    }

    .fixed-header {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background-color: black;
        padding: 10px 0;
        text-align: center;
        z-index: 1000;
    }

    .content {
        padding-top: 110px; /* Adjust this value to create space between header and content */
    }

    .product {
        padding-top: 20px; /* Adjust this value as needed */
        margin-bottom: 20px; /* Adjust this value as needed */
        /* Add any additional styling for the product item */
    }
</style>
@code {
    List<Product> l { get; set; }
    string error { get; set; }
    ApiServices es = new ApiServices();
    bool b = false;
    bool InsertProduct  { get; set; }
    string path = "data:image/png;base64,";
    string Productpath = "data:image/png;base64,";
    private string modalDisplay = "none";
    string ProductName { get; set; }
    string ProductDescription { get; set; }
    string ProductPrice { get; set; }
    byte[] ProductPicture { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Products = Products;
        await GetDimensions();
        InsertProduct = false;
        if (!AuthService.IsUserAuthenticated)
        {
            nav.NavigateTo("/Login");
        }
    }

    private void GoStroe()
    {
        nav.NavigateTo("/store");
    }
    private void GoMain()
    {
        nav.NavigateTo("/main");
    }
    private void Gomap()
    {

        nav.NavigateTo($"maps/{Userservice.CurrentUser.location.lat}/{Userservice.CurrentUser.location.lng}");
    }

    private void GoSettings()
    {
        nav.NavigateTo("/setting");
    }
    private void GoToProuctPage(int id)
    {
        nav.NavigateTo($"/item/{id.ToString()}");
    }

    public void OpenModal()
    {
        modalDisplay = "block";
        Console.WriteLine("Modal opened");
    }

    private async Task AddProduct()
    {
        Product p = new Product(-1, ProductName, ProductDescription, int.Parse(ProductPrice), ProductPicture);
        error = await es.InsertNewProduct(p);
        StateHasChanged();
    }
    private void CloseModal()
    {
        modalDisplay = "none";
    }


    public void AddP()
    {
        InsertProduct = true;
    }

    async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        d.Height = dimension.Height;
        d.Width = dimension.Width;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        // Ensure the selected file is not null
        if (e.File != null)
        {
            // Read the file content into a byte array
            using (var memoryStream = new MemoryStream())
            {
                await e.File.OpenReadStream().CopyToAsync(memoryStream);
                var imageData = memoryStream.ToArray();

                // Create an ImageModel instance and upload the image

                Productpath = Productpath + Convert.ToBase64String(imageData);

                ProductPicture = imageData;
            }
        }
    }
}
