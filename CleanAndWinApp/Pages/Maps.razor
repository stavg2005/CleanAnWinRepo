@page "/maps/{lat}/{lng}"
@using Model;
@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime
@inject UserService Userservice
@inject AuthService AuthService
@inject Data.BrowserService Service
@inject Data.BrowserDimension d;
@inject NavigationManager nav;
@implements IDisposable
@inject IJSRuntime JS
@using System
@using Services
<div id="map" style="height:@(d.Height-20)px;width:@(d.Width-20)px;">
</div>



@code {


    [Parameter]
    public Tuple<String,string> LatnLng { get; set; }
    private string modalDisplay = "none";
    TrashCan newTrash = new TrashCan();
    ApiServices a = new ApiServices();

    [Parameter]
    public string lat{ get; set; }
    [Parameter]
    public string lng { get; set; }

    private DotNetObjectReference<Maps> dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("Helpers.SetDotNetHelper", dotNetHelper);
        }
    }






    private async Task ReloadPage()
    {
        await JS.InvokeVoidAsync("reloadPage");
    }
    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }



    private async Task InsertValuesToUserService()
    {
        Userservice.CurrentUser = await AuthService.GetUserInfo();

    }
    async Task GetDimensions()
    {
        var dimension = await Service.GetDimensions();
        d.Height = dimension.Height;
        d.Width = dimension.Width;
    }

    protected override async Task OnInitializedAsync()
    {
        await InsertValuesToUserService();
        ApiServices a = new ApiServices();
        await GetDimensions();

        if (!AuthService.IsUserAuthenticated)
        {
            NavManager.NavigateTo("Login");
        }



        var uri = new Uri(NavManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryString.AllKeys.Contains("param1"))
        {
            lat = Uri.UnescapeDataString(queryString["param1"]);
        }

        if (queryString.AllKeys.Contains("param2"))
        {
            lng = Uri.UnescapeDataString(queryString["param2"]);
        }
        List<TrashCan> locations = await a.GetAllTrashCanLocations();
        if (locations != null)
        {
            Javascriptquery js = new Javascriptquery(locations, lat, lng);
            await JSRuntime.InvokeVoidAsync("initialize", js,DotNetObjectReference.Create(this));
        }

    }







 




    public class Javascriptquery
    {
        public Javascriptquery(List<TrashCan> locations, string lat, string lng)
        {
            this.locations = locations;
            this.lat = lat;
            this.lng = lng;
        }

        public List<TrashCan> locations { get; set; }
        public string lat { get; set; }
        public string lng { get; set; }
        
    }

}

