@page "/maps/{lat}/{lng}"
@using Model;

@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime
@inject UserService Userservice
@inject AuthService AuthService
@inject NavigationManager nav;

<div id="map" style="height:800px;width:300px;">
</div>

<div class="modal" style="display: @modalDisplay">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <h3>Place new TrashCan</h3>
                    <p> are you sure you want to place the trash can here?</p>
            </div>

            <button type="button" class="btn btn-primary" @onclick="CreateTrashCan">Add trashCan</button>
    </div>

@code {

    [Parameter]
    public Tuple<String,string> LatnLng { get; set; }
    private string modalDisplay = "none";
    TrashCan newTrash = new TrashCan();
    ApiServices a = new ApiServices();

    [Parameter]
    public string lat{ get; set; }
    [Parameter]
    public string lng { get; set; }


    private async Task InsertValuesToUserService()
    {
        Userservice.CurrentUser = await AuthService.GetUserInfo();

    }
    protected override async Task OnInitializedAsync()
    {
        await InsertValuesToUserService();
        Model.ApiServices a = new Model.ApiServices();

        var uri = new Uri(NavManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryString.AllKeys.Contains("param1"))
        {
            lat = Uri.UnescapeDataString(queryString["param1"]);
        }

        if (queryString.AllKeys.Contains("param2"))
        {
            lng = Uri.UnescapeDataString(queryString["param2"]);
        }
        List<TrashCan> locations = await a.GetAllTrashCanLocations();
        if (locations != null)
        {
            Javascriptquery js = new Javascriptquery(locations, lat, lng);
            await JSRuntime.InvokeVoidAsync("initialize", js,DotNetObjectReference.Create(this));
        }

    }



    public void OpenModal()
    {
        modalDisplay = "block";
        Console.WriteLine("Modal opened");
    }


    private void CloseModal()
    {
        modalDisplay = "none";
    }

    [JSInvokable]
    public async Task HandleMapClick(double latitude, double longitude)
    {
        
        newTrash.latitude = latitude.ToString();
        newTrash.longitude = longitude.ToString();
        OpenModal();
        StateHasChanged();
    }

    private async Task CreateTrashCan()
    {
        
        await a.InsertTrashCan(newTrash);
        nav.NavigateTo($"mapredirect");
        CloseModal();
        
        
    }




    public class Javascriptquery
    {
        public Javascriptquery(List<TrashCan> locations, string lat, string lng)
        {
            this.locations = locations;
            this.lat = lat;
            this.lng = lng;
        }

        public List<TrashCan> locations { get; set; }
        public string lat { get; set; }
        public string lng { get; set; }
        
    }

}

