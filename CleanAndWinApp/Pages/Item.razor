@page "/item/{ItemID}"
@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime;
@inject UserService Userservice;
@inject AuthService AuthService;
@inject Data.BrowserService Service
@inject Data.BrowserDimension d;
@inject NavigationManager Nav;
@using Services
@using Model;


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/ProductP.css">
    <title></title>
</head>
<body>
    @if (p != null)
    {
        <main>

            <!-- Left Column / Headphones Image -->

            <div >
                <img src="@(path+Convert.ToBase64String(p.ProductPicture))" style="margin-top:-200px;position:relative;width:380px;height:400px">
            </div>

            <!-- Right Column -->
            <div>

                <!-- Product Description -->
                <div class="product-description">
                    <span></span>
                    <h1>@p.ProductName</h1>
                    <p>@p.ProductDescription</p>
                </div>

                <!-- Product Configuration -->
                <!-- Product Pricing -->
                <div class="product-price" >
                    <span>@p.ProductPrice</span>
                    <a  class="cart-btn" @onclick="AddToCart" >Add to cart</a>
                </div>
            </div>
        </main>
    }
    
   


</body>


@code {
    [Parameter]
    public string ItemID { get; set; }
    Product p { get; set; }
    string path= "data:image/png;base64,";
    string base64 { get; set; }
    bool b = false;
    bool Updatedphoto = false;
    string error = "";
    bool EditMode = false;
    string ProductName { get; set; }
    string ProductDescription { get; set; }
    string ProductPrice { get; set; }
    byte[] ProductPicture { get; set; }
    ApiServices a = new ApiServices();
    protected override async Task OnInitializedAsync()
    {
        await InsertValuesToUserService();
        ApiServices a = new ApiServices();
        p = await a.GetProductFromPK(int.Parse(ItemID));
        ProductName = p.ProductName;
        ProductDescription = p.ProductDescription;
        ProductPrice = p.ProductPrice.ToString();
        ProductPicture = p.ProductPicture;
        if (p != null)
        {
            base64 = Convert.ToBase64String(p.ProductPicture);
        }



    }

    private async Task InsertValuesToUserService()
    {
        Userservice.CurrentUser = await AuthService.GetUserInfo();

    }
    private async Task UpdateProductData()
    {
        // Your logic to update p and base64
        if (p != null)
        {
            base64 = Convert.ToBase64String(p.ProductPicture);
            StateHasChanged();
        }
    }

    private async Task AddToCart()
    {
        error = await a.AddItemToCart(ItemID, Userservice.CurrentUser.UserID);
        Nav.NavigateTo("store");
    }

    private async Task SaveChanges()
    {
        Product newP = new Product(p.ProductID, ProductName, ProductDescription, int.Parse(ProductPrice), ProductPicture);
        await a.UpdateProduct(newP);
        await a.UploadProductImage(newP.ProductID,newP.ProductPicture);
        EditMode = false;
        StateHasChanged();

    }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        // Ensure the selected file is not null
        if (e.File != null)
        {
            Updatedphoto = true;
            // Read the file content into a byte array
            using (var memoryStream = new MemoryStream())
            {
                await e.File.OpenReadStream().CopyToAsync(memoryStream);
                var imageData = memoryStream.ToArray();

                // Create an ImageModel instance and upload the image
 
                path = path + Convert.ToBase64String(imageData);

                ProductPicture = imageData;
            }
        }
    }

    private void InitiateEditMode()
    {
        EditMode = true;
    }

}
