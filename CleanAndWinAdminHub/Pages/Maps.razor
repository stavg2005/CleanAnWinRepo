@page "/maps/{lat}/{lng}"
@using Model;
@inject NavigationManager NavManager;
@inject IJSRuntime JSRuntime


@inject NavigationManager nav;
@implements IDisposable
@inject IJSRuntime JS
@using System
@using Services

<!-- Modal container -->
<div class="modal" style="display: @modalDisplay; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 99; justify-content: center; align-items: center; background-color: rgba(0, 0, 0, 0.5);">
    <!-- Modal content -->
    <div class="modal-content" style="z-index: 100; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);">
        <span class="close" @onclick="CloseModal" style="cursor: pointer; font-size: 24px;">&times;</span>
        <h3>Place new TrashCan</h3>
        <p>Are you sure you want to place the trash can here?</p>
        <button type="button" class="btn btn-primary" @onclick="CreateTrashCan">Add TrashCan</button>
    </div>
</div>

<!-- Map container -->
<div id="map-container" style="position: fixed; z-index: 1; width: 100vw; height: 100vh;">
    <div id="map" style="width: 100%; height: 100%;"></div>
</div>




@code {


    [Parameter]
    public Tuple<String, string> LatnLng { get; set; }
    private string modalDisplay = "none";
    TrashCan newTrash = new TrashCan();
    ApiServices a = new ApiServices();

    [Parameter]
    public string lat { get; set; }
    [Parameter]
    public string lng { get; set; }

    private DotNetObjectReference<Maps> dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("Helpers.SetDotNetHelper", dotNetHelper);
        }
    }




    [JSInvokable("DeleteTrashCan")]
    public async Task DeleteTrashCan(int id)
    {

        await a.DeleteTrashCan(id);

        nav.NavigateTo($"mapredirect");





    }

    private async Task ReloadPage()
    {
        await JS.InvokeVoidAsync("reloadPage");
    }
    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }



    private async Task InsertValuesToUserService()
    {


    }


    protected override async Task OnInitializedAsync()
    {

        ApiServices a = new ApiServices();






        var uri = new Uri(NavManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryString.AllKeys.Contains("param1"))
        {
            lat = Uri.UnescapeDataString(queryString["param1"]);
        }

        if (queryString.AllKeys.Contains("param2"))
        {
            lng = Uri.UnescapeDataString(queryString["param2"]);
        }
        List<TrashCan> locations = await a.GetAllTrashCanLocations();
        if (locations != null)
        {
            Javascriptquery js = new Javascriptquery(locations, lat, lng,true);
            await JSRuntime.InvokeVoidAsync("initialize", js, DotNetObjectReference.Create(this));
        }

    }



    public void OpenModal()
    {
        modalDisplay = "flex";
        Console.WriteLine("Modal opened");
    }


    private void CloseModal()
    {
        modalDisplay = "none";
    }

    [JSInvokable]
    public async Task HandleMapClick(double latitude, double longitude)
    {

        newTrash.latitude = latitude.ToString();
        newTrash.longitude = longitude.ToString();
        OpenModal();
        StateHasChanged();


    }

    private async Task CreateTrashCan()
    {

        await a.InsertTrashCan(newTrash);
        nav.NavigateTo($"mapredirect");
        StateHasChanged();
        CloseModal();


    }




    public class Javascriptquery
    {
        public Javascriptquery(List<TrashCan> locations, string lat, string lng, bool IsUserAdmin)
        {
            this.locations = locations;
            this.lat = lat;
            this.lng = lng;
            this.isuseradmin = IsUserAdmin;
        }

        public List<TrashCan> locations { get; set; }
        public string lat { get; set; }
        public string lng { get; set; }
        public bool isuseradmin { get; set; }

    }

}


